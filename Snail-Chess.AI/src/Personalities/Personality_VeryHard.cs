using SnailChess.AI.Evaluation;
using SnailChess.AI.Search;

namespace SnailChess.AI.Personalities
{
    public partial struct BotPersonality
    {
        public static readonly BotPersonality VERY_HARD = new BotPersonality()
        {
            /* ---------------------------- 
                Search
            ------------------------------- */
            searchOptions = new SearchOptions(_enable_qs: true, _enable_draw_detection: true, _enable_pvs: true, _enable_lmr: true, 
              _enable_nmp: true, _enable_see_pruning: true, _enable_lmp: true, _enable_razoring: true, _enable_rfp: true, _enable_iir: true, _enable_check_extension: true),
              
            /* ---------------------------- 
                Evaluation
            ------------------------------- */
            evaluationParams = new EvaluationParams(
                _material: new int[]
                {
                     0,
                     0,
                    10, 
                    25, 
                    34, 
                    44, 
                    55,
                    60,
                },
                _material_eg: new int []
                {
                     0,
                     0,
                   100, 
                   320, 
                   330, 
                   500, 
                   900,
                  1500
                },
                _pst_pawn: new int[64]
                {  
                   0,   0,   0,   0,   0,   0,   0,   0,
                  20,  20,  20,  20,  20,  20,  20,  20,
                  10,  10,  10,  20,  20,  10,  10,  10,
                   5,   5,   5,  15,  15,   5,   5,   5,
                   0,   0,   0,  10,  10,   0,   0,   0,
                   5,  -5, -10,   0,   0, -10,  -5,   5,
                   5,  10,  10, -20, -20,  10,  10,   5,
                   0,   0,   0,   0,   0,   0,   0,   0
                },
                _pst_pawn_eg: new int [64]
                {  
                   0,   0,   0,   0,   0,   0,   0,   0,
                  50,  50,  50,  50,  50,  50,  50,  50,
                  10,  15,  20,  30,  30,  20,  15,  10,
                   5,   5,  10,  25,  25,  10,   5,   5,
                   0,   0,   0,  20,  20,   0,   0,   0,
                   5,  -5, -10,   0,   0, -10,  -5,   5,
                   5,  10,  10, -20, -20,  10,  10,   5,
                   0,   0,   0,   0,   0,   0,   0,   0
                },
                _pst_knight: new int [64]
                {  
                    -50, -40, -30, -30, -30, -30, -40, -50,
                    -40, -20,   0,   0,   0,   0, -20, -40,
                    -30,   0,  10,  15,  15,  10,   0, -30,
                    -30,   5,  15,  20,  20,  15,   5, -30,
                    -30,   0,  15,  20,  20,  15,   0, -30,
                    -30,   5,  10,  15,  15,  10,   5, -30,
                    -40, -20,   0,   5,   5,   0, -20, -40,
                    -50, -40, -30, -30, -30, -30, -40, -50,
                },
                _pst_knight_eg: new int[64]
                { 
                    -50, -40, -30, -30, -30, -30, -40, -50,
                    -40, -20,   0,   0,   0,   0, -20, -40,
                    -30,   0,  15,  15,  15,  15,   0, -30,
                    -30,   5,  15,  25,  25,  15,   5, -30,
                    -30,   0,  15,  25,  25,  15,   0, -30,
                    -30,   5,  10,  15,  15,  10,   5, -30,
                    -40, -20,   0,   5,   5,   0, -20, -40,
                    -50, -40, -30, -30, -30, -30, -40, -50,
                },
                _pst_bishop: new int[64]
                { 
                    -20, -10, -10, -10, -10, -10, -10, -20,
                    -10,   0,   0,   0,   0,   0,   0, -10,
                    -10,   0,   5,  10,  10,   5,   0, -10,
                    -10,   5,   5,  10,  10,   5,   5, -10,
                    -10,   0,  10,  10,  10,  10,   0, -10,
                    -10,  10,  10,  10,  10,  10,  10, -10,
                    -10,   5,   0,   0,   0,   0,   5, -10,
                    -20, -10, -10, -10, -10, -10, -10, -20,
                },
                _pst_bishop_eg: new int[64] 
                {  
                    -25, -15, -15, -15, -15, -15, -15, -25,
                    -15,   0,   0,   0,   0,   0,   0, -15,
                    -15,   0,   5,  10,  10,   5,   0, -15,
                    -15,   5,   5,  10,  10,   5,   5, -15,
                    -15,   0,  10,  10,  10,  10,   0, -15,
                    -15,  10,  10,  10,  10,  10,  10, -15,
                    -15,   5,   0,   0,   0,   0,   5, -15,
                    -25, -15, -15, -15, -15, -15, -15, -25,
                },
                _pst_rook: new int[64] 
                {
                    0,  0,  0,  0,  0,  0,  0,   0,
                  -10,  0,  0,  0,  0,  0,  0, -10,
                  -10,  0,  0,  0,  0,  0,  0, -10,
                  -10,  5,  7,  7,  7,  5,  5, -10,
                    5, 10, 10, 10, 10, 10, 10,   5,
                    5,  5,  5,  5,  5,  5,  5,   5,
                    0,  0,  0,  0,  0,  0,  0,   0,
                    0,  0,  0,  0,  0,  0,  0,   0,
                },
                _pst_rook_eg: new int[64] 
                {  
                    0,  0,  0,  0,  0,  0,  0,  0,
                    5, 10, 10, 10, 10, 10, 10,  5,
                   -5,  0,  5,  5,  5,  0,  0, -5,
                   -5,  0,  0,  0,  0,  0,  0, -5,
                   -5,  0,  0,  0,  0,  0,  0, -5,
                   -5,  0,  0,  0,  0,  0,  0, -5,
                   -5,  0,  0,  0,  0,  0,  0, -5,
                    0,  0,  0,  5,  5,  0,  0,  0
                },
                _pst_queen: new int[64] 
                { 
                  -20, -10, -10, -5, -5, -10, -10, -20,
                  -10,   0,   0,  0,  0,   0,   0, -10,
                  -10,  -5,   5,  5,  5,   5,  -5, -10,
                   -5,  -5,   5,  5,  5,   5,  -5,  -5,
                    0,  -5,   5,  5,  5,   5,  -5,  -5,
                  -10,   5,   5,  5,  5,   5,   0, -10,
                  -10,   0,   5,  0,  0,   0,   0, -10,
                  -20, -10, -10, -5, -5, -10, -10, -20
                },
                _pst_queen_eg: new int[64] 
                { 
                  -25, -12, -12, -10, -10, -12, -12, -25,
                  -12,   0,   0,   0,   0,   0,   0, -12,
                  -12,  -5,   0,   5,   0,   5,  -5, -12,
                  -12,  -5,   5,   5,   5,   5,  -5, -12,
                  -12,  -5,   7,   7,   7,   5,  -5, -12,
                  -12,   5,   5,   5,   5,   5,   0, -12,
                  -12,   0,  -5, - 5, - 5,   0,   0, -12,
                  -25, -12, -12, -10, -10, -12, -12, -25,
                },
                _pst_king: new int[64] 
                {  
                    -30, -40, -40, -50, -50, -40, -40, -30,
                    -30, -40, -40, -50, -50, -40, -40, -30,
                    -30, -40, -40, -50, -50, -40, -40, -30,
                    -30, -40, -40, -50, -50, -40, -40, -30,
                    -20, -30, -30, -40, -40, -30, -30, -20,
                    -10, -20, -20, -20, -20, -20, -20, -10,
                     20,  20,   0,   0,   0,   0,  20,  20,
                     20,  30,  10,   0,   0,  10,  30,  20
                },
                _pst_king_eg: new int[64] 
                {  
                  -50, -40, -30, -20, -20, -30, -40, -50,
                  -30, -20, -10,   0,   0, -10, -20, -30,
                  -30, -10,  20,  30,  30,  20, -10, -30,
                  -30, -10,  30,  40,  40,  30, -10, -30,
                  -30, -10,  30,  40,  40,  30, -10, -30,
                  -30, -10,  20,  30,  30,  20, -10, -30,
                  -30, -30,   0,   0,   0,   0, -30, -30,
                  -50, -30, -30, -30, -30, -30, -30, -50
                },
                _passed_pawn_bonus: new int[] 
                {
                  0, 5, 8, 27, 48, 101, 93, 0
                },
                _passed_pawn_bonus_eg: new int[] 
                {
                  0, 5, 17, 54, 97, 202, 187, 0
                },
                _protected_passed_pawn_bonus: 5,
                _protected_passed_pawn_bonus_eg: 10,
                _double_pawn_penalty:    -5,
                _double_pawn_penalty_eg: -10,
                _isolated_pawn_penalty:   0,
                _tempo: 5,
                _kingSafety_attack_weights: new int[]
                {
                  0, 0, 0, 2, 9, 2, 12, -2
                },
                _bishop_mobility_score: 5,
                _rook_mobility_score:   3,
                _queen_mobility_score:  3,
                _bishop_mobility_score_eg: 0,
                _rook_mobility_score_eg:   0,
                _queen_mobility_score_eg:  0,
                _knight_pawn_adj: new int[]
                {
                  -122, -20, -5, 1, 9, 14, 25, 37, 48
                },
                _rook_pawn_adj: new int[]
                {
                  -6, -6, -2, -1, -1, 4, 8, 16, 28
                },
                _bishop_pair_score:     5,
                _bishop_pair_score_eg:  8,
                _rook_pair_score:       5,
                _rook_pair_score_eg:    8,
                _knight_pair_score:     5,
                _knight_pair_score_eg:  0
            )
        };
    }
}