using SnailChess.AI.Evaluation;
using SnailChess.AI.Search;

namespace SnailChess.AI.Personalities
{
    public partial struct BotPersonality
    {
        public static readonly BotPersonality MAX = new BotPersonality()
        {
            /* ---------------------------- 
                Search
            ------------------------------- */
            searchOptions = new SearchOptions(_enable_qs: true, _enable_draw_detection: true, _enable_pvs: true, _enable_lmr: true, 
              _enable_nmp: true, _enable_see_pruning: true, _enable_lmp: true, _enable_razoring: true, _enable_rfp: true, _enable_iir: true, _enable_check_extension: true),
              
            /* ---------------------------- 
                Evaluation
            ------------------------------- */
            evaluationParams = new EvaluationParams(
                _material: new int[]
                {
                  0,
                  0,
                  119,
                  514,
                  552,
                  749,
                  1598,
                  20000
                },
                _material_eg: new int []
                {
                  0,
                  0,
                  132,
                  414,
                  439,
                  756,
                  1409,
                  20000
                },
                _pst_pawn: new int[]
                {  
                    0,   0,   0,  0,    0,    0,   0,    0,  
                   91, 187,  52, 135, 107,  187,   6, -128,  
                    4,  21,  51,  45, 110,  156,  73,    5,  
                  -23,  18,  12,  49,  49,   40,  29,  -28,  
                  -49, -23,   6,  33,  40,   23,  10,  -36,  
                  -37, -13,   3,   3,  26,   25,  57,   -6,  
                  -51,  -8, -25, -19,  -8,   58,  67,  -22,  
                    0,   0,   0,   0,   0,    0,   0,    0
                },
                _pst_pawn_eg: new int []
                {  
                    0,    0,    0,    0,    0,    0,    0,    0,  
                  208,  170,  152,   96,  116,   91,  170,  239,  
                   89,   70,   33,  -20,  -47,  -15,   34,   58,  
                   56,   31,   13,  -21,   -8,    2,   20,   35,  
                   41,   27,    6,   -8,   -5,   -1,    6,   17,  
                   22,   13,    3,    6,    9,    5,  -12,    1,  
                   38,   11,   29,   15,   27,    6,   -9,    2, 
                    0,    0,    0,    0,    0,    0,    0,    0
                },
                _pst_knight: new int []
                {  
                -241, -122,  -47,  -15,  189,  -124,    8, -102,  
                 -75,  -17,  190,   86,   80,   174,   62,   36,  
                 -24,  144,  105,  147,  212,   274,  197,  157,  
                  51,   96,   92,  156,  130,   196,  100,  123,  
                  50,   85,  107,  103,  122,   115,  118,   63,  
                  38,   67,  105,  108,  122,   116,  126,   49,  
                  25,  -11,   68,   93,   97,   124,   61,   58,  
                -139,   55,    1,   33,   78,    53,   59,   37
                },
                _pst_knight_eg: new int[]
                { 
                  -5,  20,  66,  26,    6,   34,  -25,  -80, 
                  32,  64,  15,  74,   61,   18,   30,  -15,  
                  36,  37,  87,  84,   48,   45,   27,  -11,  
                  45,  77, 108, 103,  105,   80,   85,   34,  
                  45,  61,  95, 108,    94,  97,   80,   40,  
                  31,  68,  60,  90,    83,  54,   30,   35,  
                  16,  50,  57,  58,    60,  34,   37,  -11,  
                  61, -17,  34,  52,    27,  34,  -20,  -37
                },
                _pst_bishop: new int[]
                { 
                   2,   6,  -161,  -85,  -32,  -50,     3,   64, 
                  -6,  77,     3,    2,   90,   144,   82,  -31, 
                  -4,  92,   114,   92,   94,   131,   91,   30, 
                  41,  62,    71,  123,   98,   103,   64,   51, 
                  54,  72,    68,   85,  102,    60,   65,   69, 
                  66,  88,    83,   78,   77,   112,   81,   80, 
                  83,  96,    92,   64,   80,    88,  127,   74, 
                  15,  78,    60,   53,   59,    53,  -11,   27
                },
                _pst_bishop_eg: new int[] 
                {  
                  15,   6,  39,  31,  33,  24,  14,  -19,  
                  32,  15,  41,  14,  14,  -1,   9,   18,  
                  49,  16,  10,   8,   3,   7,  26,   44,  
                  35,  36,  30,  19,  22,  22,  24,   33,  
                  25,  26,  36,  40,  19,  34,  18,   18,  
                  19,  23,  36,  41,  47,  15,  20,   16,  
                  14,   0,  18,  33,  33,  17,  -2,  -12,  
                  10,  24,  11,  31,  25,  17,  43,   24
                },
                _pst_rook: new int[] 
                { 
                  75,   107,   64,  147,  144,  39,   55,   67, 
                  90,   91,   153,  171,  186,  180,  82,  118, 
                  35,   71,    80,   95,   67,  115,  164,  68, 
                  0,    25,    61,   84,   76,  103,  43,   15, 
                  -26,  -5,    27,   33,   55,  24,   66,   -7, 
                  -48,  -1,    14,    9,   42,  34,   32,   -24, 
                  -42,  15,     7,   23,   39,  51,   33,   -80, 
                  6,    20,    46,   65,   70,  39,   -12,    7
                },
                _pst_rook_eg: new int[] 
                {  
                  117,  106,  126,  101,  105,  127,  121,  115, 
                  113,  116,  101,   95,   75,   89,  115,  102, 
                  121,  118,  113,  111,  108,   91,   82,   98, 
                  127,  118,  125,  104,  108,  102,  105,  122, 
                  128,  128,  124,  115,  101,  104,   90,  110, 
                  123,  118,  102,  107,   91,   90,   96,   98, 
                  113,   99,  108,  109,   91,   86,   86,  120, 
                  93,   108,  102,   93,   86,   88,  113,   65
                },
                _pst_queen: new int[] 
                { 
                  68,   39,    76,   40,  219,  213,  157,  185, 
                  57,    0,    49,   51,   -5,  165,  126,  194,  
                  65,    47,   99,   46,  102,  160,  139,  163,  
                  25,    34,   36,   34,   66,   86,   73,   77,  
                  90,    28,   70,   63,   78,   75,   91,   93, 
                  63,   110,   77,   92,   86,   95,  115,  104, 
                  52,    92,  124,  109,  122,  128,  102,  114, 
                  103,  102,  116,  139,   96,   71,   48,   23
                },
                _pst_queen_eg: new int[] 
                { 
                  102,  189,  176,  196,  106,  106,  121,  151, 
                  114,  166,  181,  204,  243,  138,  163,  118, 
                  135,  165,  117,  230,  199,  154,  169,  155, 
                  212,  202,  176,  188,  193,  177,  238,  234, 
                  125,  209,  156,  178,  155,  174,  189,  181, 
                  161,   69,  141,  117,  143,  145,  143,  167, 
                  119,   85,   63,   97,   97,   74,   49,   83,  
                   83,   68,   81,   41,  118,   89,  119,   82
                },
                _pst_king: new int[] 
                {  
                 -106, 207, 202,   98, -133, -132,   75,   17, 
                  171, 100,  53,  171,   25,   44,  -53, -196,  
                   63,  99, 139,   41,   68,  150,  179,  -65,  
                   23, -12,  41,  -60,  -59,  -54,   -2, -141,  
                 -147,  32, -92, -162, -178, -115, -106, -158, 
                  -27, -14, -75, -120, -128,  -95,  -29,  -75,  
                   -8,   8, -58, -168, -126,  -73,    4,   10,  
                  -53,  55,   1, -149,  -24,  -86,   32,   13
                },
                _pst_king_eg: new int[] 
                {  
                  -139, -111, -83, -64,  -10,  33, -22,  -51,  
                  -67,     2,   8, -10,   17,  47,  38,   37,  
                   12,    10,  11,  12,    9,  49,  35,   16,  
                  -39,    28,  32,  53,   47,  59,  37,   13,  
                  -20,   -15,  48,  67,   73,  54,  26,   -4,  
                  -40,    -7,  30,  51,   58,  41,  10,  -12,  
                  -57,   -26,  16,  40,   41,  20, -12,  -44,  
                  -107,  -83, -43,  -5,  -47, -13, -61, -107
                },
                _passed_pawn_bonus: new int[] 
                {
                  0, 6, -12, -25, -5, 4, 53, 0
                },
                _passed_pawn_bonus_eg: new int[] 
                {
                  0, 5, 17, 54, 97, 202, 187, 0
                },
                _protected_passed_pawn_bonus: 30,
                _protected_passed_pawn_bonus_eg: 3,
                _double_pawn_penalty: -4,
                _double_pawn_penalty_eg: -10,
                _isolated_pawn_penalty:  -19,
                _tempo: 45,
                _kingSafety_attack_weights: new int[]
                {
                  0, 0, 0, 2, 9, 2, 24, -2
                },
                _bishop_mobility_score: 9,
                _rook_mobility_score: 11,
                _queen_mobility_score: 5,
                _bishop_mobility_score_eg: 6,
                _rook_mobility_score_eg: 5,
                _queen_mobility_score_eg: 10,
                _knight_pawn_adj: new int[]
                {
                  -122, -20, -5, 1, 9, 14, 25, 37, 48
                },
                _rook_pawn_adj: new int[]
                {
                  -6, -6, -2, -1, -1, 4, 8, 16, 28
                },
                _bishop_pair_score: 53,
                _bishop_pair_score_eg: 63,
                _rook_pair_score: 12,
                _rook_pair_score_eg: -13,
                _knight_pair_score: 4,
                _knight_pair_score_eg: -10
            )
        };
    }
}